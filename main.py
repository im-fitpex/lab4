import telebot
import requests
from telebot import types
import random

API_TOKEN = '8007301405:AAG6R3UwSHryQCq9bDS9JHlsU4yOhWh9A3o'
bot = telebot.TeleBot(API_TOKEN)

# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–∏–≥–∞—Ö
BOOKS_API_URL = "https://www.googleapis.com/books/v1/volumes?q="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏
def get_book_info(query):
    try:
        response = requests.get(BOOKS_API_URL + query)
        data = response.json()

        if 'items' in data:
            book_info = data['items'][0]['volumeInfo']
            title = book_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            authors = ", ".join(book_info.get('authors', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']))
            description = book_info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            rating = book_info.get('averageRating', '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞')

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            result = f"üìö *–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\nüé© *–ê–≤—Ç–æ—Ä(—ã):* {authors}\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {rating}\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏
            if len(description) > 4096:
                description_parts = [description[i:i+4096] for i in range(0, len(description), 4096)]
                return result, description_parts
            else:
                return result + f"*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}", None
        else:
            return "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", None

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏'), 
               types.KeyboardButton('–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞'),
               types.KeyboardButton('–°–ø—Ä–∞–≤–∫–∞'))
    markup.add(types.KeyboardButton('–¢–æ–ø –∫–Ω–∏–≥'),
               types.KeyboardButton('–¢–æ–ø –∑–∞ –º–µ—Å—è—Ü'),
               types.KeyboardButton('–¢–æ–ø –∑–∞ –≥–æ–¥'))
    bot.send_message(message.chat.id, 
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:",
                     reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id,
                     "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                     "/search - –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.\n"
                     "/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∫–Ω–∏–≥.\n"
                     "/quit - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n")

# –ö–æ–º–∞–Ω–¥–∞ /search
@bot.message_handler(commands=['search'])
def search_book(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(msg, process_search)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏
def process_search(message):
    query = message.text.strip()
    bot.send_chat_action(message.chat.id, 'typing')  # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
    info, extra_parts = get_book_info(query)

    if extra_parts:
        bot.send_message(message.chat.id, info, parse_mode="Markdown")
        for part in extra_parts:
            bot.send_message(message.chat.id, part)
    else:
        bot.send_message(message.chat.id, info, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /quit
@bot.message_handler(commands=['quit'])
def quit_bot(message):
    bot.send_message(message.chat.id, "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏"
@bot.message_handler(func=lambda message: message.text == "–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏")
def button_search(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(msg, process_search)

# –ö–Ω–æ–ø–∫–∞ "–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞"
@bot.message_handler(func=lambda message: message.text == "–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞")
def random_book(message):
    popular_queries = ['Harry Potter', 'Sherlock Holmes', '1984', 'Pride and Prejudice', 'Dune']
    query = random.choice(popular_queries)
    bot.send_message(message.chat.id, "–ò—â—É —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É... üé≤")
    info, extra_parts = get_book_info(query)

    if extra_parts:
        bot.send_message(message.chat.id, info, parse_mode="Markdown")
        for part in extra_parts:
            bot.send_message(message.chat.id, part)
    else:
        bot.send_message(message.chat.id, info, parse_mode="Markdown")

# –ö–Ω–æ–ø–∫–∞ "–¢–æ–ø –∫–Ω–∏–≥"
@bot.message_handler(func=lambda message: message.text == "–¢–æ–ø –∫–Ω–∏–≥")
def top_books(message):
    top_books_list = [
        'Atomic Habits - James Clear',
        'The Midnight Library - Matt Haig',
        'Where the Crawdads Sing - Delia Owens',
        'The Alchemist - Paulo Coelho',
        'Becoming - Michelle Obama'
    ]
    top_books_message = '\n'.join([f"üíº {book}" for book in top_books_list])
    bot.send_message(message.chat.id, f"–¢–æ–ø –∫–Ω–∏–≥ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏:\n{top_books_message}")

# –ö–Ω–æ–ø–∫–∞ "–¢–æ–ø –∑–∞ –º–µ—Å—è—Ü"
@bot.message_handler(func=lambda message: message.text == "–¢–æ–ø –∑–∞ –º–µ—Å—è—Ü")
def top_month(message):
    books = [
        'Lessons in Chemistry - Bonnie Garmus',
        'The Paris Library - Janet Skeslien Charles',
        'Tomorrow, and Tomorrow, and Tomorrow - Gabrielle Zevin'
    ]
    message_text = '\n'.join([f"üíº {book}" for book in books])
    bot.send_message(message.chat.id, f"–¢–æ–ø –∫–Ω–∏–≥ –∑–∞ –º–µ—Å—è—Ü:\n{message_text}")

# –ö–Ω–æ–ø–∫–∞ "–¢–æ–ø –∑–∞ –≥–æ–¥"
@bot.message_handler(func=lambda message: message.text == "–¢–æ–ø –∑–∞ –≥–æ–¥")
def top_year(message):
    books = [
        'Project Hail Mary - Andy Weir',
        'The Four Winds - Kristin Hannah',
        'Klara and the Sun - Kazuo Ishiguro'
    ]
    message_text = '\n'.join([f"üíº {book}" for book in books])
    bot.send_message(message.chat.id, f"–¢–æ–ø –∫–Ω–∏–≥ –∑–∞ –≥–æ–¥:\n{message_text}")

# –ö–Ω–æ–ø–∫–∞ "–°–ø—Ä–∞–≤–∫–∞"
@bot.message_handler(func=lambda message: message.text == "–°–ø—Ä–∞–≤–∫–∞")
def button_help(message):
    send_help(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
